---
version: 2.1

executors:

  bootstrap-cluster:
    working_directory: ~/aws-bootstrap
    docker:
    - image: quay.io/feedyard/circleci-infra-agent
    environment:
      PIPELINE: aws-bootstrap
      PREFIX: feedyard
      STATEFILE: bootstrap-cluster.state
      DEFAULT_ENV: test
      DEFAULT_ACCOUNT: sandbox
      DEFAULT_REGION: us-east-1
      DEFAULT_PROFILE: default
      BASH_ENV: local.env

commands:

  setup-job:
    steps:
    - checkout
    - setup_remote_docker
    - run:
        name: confirm Docker engine running
        command: docker info
    - run:
        name: decrypt secrets
        command: invoke dec

  # by convention the terraform state file naming is bucket/pipeline/environment/filename.state
  #
  # bucket = $PREFIX-$AWS_ACCOUNT-tf-state
  # repo-name = $PIPELINE
  # filename = $STATEFILE.state
  setup-backend:
    parameters:
      account:
        description: 's3 bucket name'
        type: string
        default: $DEFAULT_ACCOUNT
      env:
        description: 'infrastructure environment name'
        type: string
        default: $DEFAULT_ENV
      region:
        description: 'aws region'
        type: string
        default: $DEFAULT_REGION
      profile:
        description: '~/.aws/credentials profile to use. Credentials file setup separately'
        type: string
        default: $DEFAULT_PROFILE
    steps:
    - run:
        name: put parameter to stdout
        working_directory: bootstrap-cluster
        command: bash setup_aws_backend.sh $PREFIX-<< parameters.account >>-tf-state $PIPELINE/<< parameters.env >>/$STATEFILE << parameters.region >> << parameters.profile >>

jobs:

  terrafrom:
    executor: bootstrap-cluster
    parameters:
      plan:
        description: 'run terraform plan'
        type: boolean
        default: false
      apply:
        description: 'run terraform apply'
        type: boolean
        default: false
      account:
        description: 'short name used to identify aws account. e.g., sandbox, prod'
        type: string
        default: $DEFAULT_ACCOUNT
      env:
        description: 'infrastructure environment name'
        type: string
        default: $DEFAULT_ENV
      region:
        description: 'aws region'
        type: string
        default: $DEFAULT_REGION
    steps:
      - setup-job
      - setup-backend:
          account: << parameters.account >>
          env: << parameters.env >>
          region: << parameters.region >>
      - when:
          condition: << parameters.plan >>
          steps:
            - run: echo 'terraform plan'
      - when:
          condition: << parameters.apply >>
          steps:
            - run: echo 'terraform apply'


  terraform-plan:
    executor: bootstrap-cluster
    parameters:
      account:
        description: 'short name used to identify aws account. e.g., sandbox, prod'
        type: string
        default: $DEFAULT_ACCOUNT
      env:
        description: 'infrastructure environment name'
        type: string
        default: $DEFAULT_ENV
      region:
        description: 'aws region'
        type: string
        default: $DEFAULT_REGION
    steps:
      - setup-job
      - setup-backend:
          account: << parameters.account >>
          env: << parameters.env >>
          region: << parameters.region >>

  terraform-apply:
    executor: bootstrap-cluster
    parameters:
      account:
        description: 'short name used to identify aws account. e.g., sandbox, prod'
        type: string
        default: $DEFAULT_ACCOUNT
      env:
        description: 'infrastructure environment name'
        type: string
        default: $DEFAULT_ENV
      region:
        description: 'aws region'
        type: string
        default: $DEFAULT_REGION
    steps:
      - setup-job
      - setup-backend:
          account: << parameters.account >>
          env: << parameters.env >>
          region: << parameters.region >>

workflows:
  aws-bootstrap-pipeline:
    jobs:
      - terraform:
          name: plan of test environment
          plan: true
          env: test
          account: sandbox
      - approve:
          name: approve plan of test environment
          type: approval
          requires:
          - plan of test environment
      - terraform-apply:
          name: apply plan to test environment
          account: sandbox
          env: test
          requires:
            - approve plan of test environment
      - terraform-plan:
          name: plan of run environment
          account: sandbox
          env: run
          requires:
            - apply plan to test environment
      - approve:
          name: approve plan of run environment
          type: approval
          requires:
            - plan of run environment
      - terraform-apply:
          name: apply plan to run environment
          account: sandbox
          env: run
          requires:
            - approve plan of run environment
